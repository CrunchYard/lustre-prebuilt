#!/usr/bin/bash

# Function to display help message
usage() {
    echo "Usage: $0 -p <path> -s <size> -n <OST> [-o <output>] [-t <text>]"
    echo
    echo "Generate list of files greater than a certain size that reside on the specified OST."
    echo
    echo "Options:"
    echo "  -p <path>              Path to check."
    echo "  -s <size>              Minimum size of file to find expressed in MB."
    echo "  -n <OST>               The OST number."
    echo "  -o <filename>          Output results to filename (default output is stdout)."
    echo "  -t <text>              Prefix text to each line of output (default is none)."
    echo "  -h                     Display this help message."
    exit 1
}

export THEPATH=""
export SIZE=""
export OST=""
export OUTPUT=""
export TEXT=""

# Parse command line arguments
while getopts ":p:s:n:o:t:h" opt; do
    case $opt in
        p) THEPATH="$OPTARG" ;;
        s) SIZE="$OPTARG" ;;
        n) OST="$OPTARG" ;;
        o) OUTPUT="$OPTARG" ;;
        t) TEXT="$OPTARG" ;;
        h) usage ;;                     # Display help message
        \?) echo "Invalid option: -$OPTARG" >&2; usage ;;
        :) echo "Option -$OPTARG requires an argument." >&2; usage ;;
    esac
done

# Check if mandatory arguments are provided
if [ -z "$THEPATH" ]; then
    echo
    echo "Error: Argument -p is required."
    echo
    usage
fi
if [ -z "$SIZE" ]; then
    echo
    echo "Error: Argument -s is required."
    echo
    usage
fi
if [ -z "$OST" ]; then
    echo
    echo "Error: Argument -n is required."
    echo
    usage
fi

# Output
if [ -z "$OUTPUT" ]; then
    export OUTPUT="/dev/stdout"
fi

# Check for valid integers
if ! [[ "$SIZE" =~ ^[0-9]+$ ]]; then
    echo
    echo "Error: Argument for -s must be an integer."
    echo
    usage
fi
if ! [[ "$OST" =~ ^[0-9]+$ ]]; then
    echo
    echo "Error: Argument for -n must be an integer."
    echo
    usage
fi

echo "#/path/filename" > $OUTPUT

rbh-find "$THEPATH" -size +${SIZE}M 2> /dev/null | while read FILE; do
    export FILE
    rbh-report -e $FILE 2> /dev/null | gawk -F' : ' '{oststr=sprintf("ost#%s:",ENVIRON["OST"]); if(substr($1,0,7)=="stripes"&&index($2,oststr)!=0) {printf("%s%s\n", ENVIRON["TEXT"], ENVIRON["FILE"]);}}' >> $OUTPUT
done
